@page "/actores"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Indice Actores</h3>

<div class="mb-3">
    <a href="actores/crear" class="btn btn-info">Crear actor</a>
</div>

<Paginacion PaginaActual="paginaActual" 
            PaginasTotales="paginasTotales" 
            PaginaSeleccionada="PaginaSeleccionada" ></Paginacion>

<ListadoGenerico Listado="Actores">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Actores!)
                {
                    <tr>
                        <td>
                            <a href="actores/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Borrar(item))>Borrar</button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    public List<Actor>? Actores { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var respuestaHTTP = await repositorio.Get<List<Actor>>($"api/actores?pagina={pagina}");
        Actores = respuestaHTTP.Response!;
        paginasTotales = int.Parse(respuestaHTTP.HttpResponseMessage
            .Headers.GetValues("totalPaginas").FirstOrDefault()!);
    }

    private async Task Borrar(Actor actor)
    {
        var responseHTTP = await repositorio.Delete($"api/actores/{actor.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("actores");
            }
            else
            {
                var mensajeError = await responseHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Cargar();
        }
    }
}
